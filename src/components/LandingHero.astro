<div id="landing-hero">
</div>

<script>

			import * as THREE from 'three';

			import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
			import { GCodeLoader } from 'three/addons/loaders/GCodeLoader.js';
			import { TextGeometry } from 'three/addons/geometries/TextGeometry.js';
			import { FontLoader } from 'three/addons/loaders/FontLoader.js';

			let camera, scene, renderer;

			init();
			render();

			function init() {

				camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 1, 1000 );
				camera.position.set( 0, 0, 70 );

				scene = new THREE.Scene();

				const loader = new GCodeLoader();
				loader.load( 'assets/models/island.gcode', function ( object ) {
					object.children.forEach(child => {
						if (child.material) {
							child.material.color.setHex(0x800080); // Set color to purple
							child.material.opacity = 0.3;
							child.material.transparent = true;
						}
					});

					object.position.set( - 150, - 20, 150 );
					scene.add( object );

          render();

				} );

				// Create a star field
				const starsGeometry = new THREE.BufferGeometry();
				const starsMaterial = new THREE.PointsMaterial({
					color: 0xFFFFFF,
					size: 0.1
				});

				const starsVertices = [];
				for (let i = 0; i < 10000; i++) {
					const x = THREE.MathUtils.randFloatSpread(2000);
					const y = THREE.MathUtils.randFloatSpread(2000);
					const z = THREE.MathUtils.randFloatSpread(2000);
					starsVertices.push(x, y, z);
				}

				starsGeometry.setAttribute('position', new THREE.Float32BufferAttribute(starsVertices, 3));
				const starField = new THREE.Points(starsGeometry, starsMaterial);
				scene.add(starField);

				// Add text
				const fontLoader = new FontLoader();
				fontLoader.load('/fonts/helvetiker_bold.typeface.json', function(font) {
					const textGeometry = new TextGeometry('SAMLAND', {
						font: font,
						size: 10,
						depth: 2,
						curveSegments: 12,
						bevelEnabled: true,
						bevelThickness: 0.5,
						bevelSize: 0.3,
						bevelOffset: 0,
						bevelSegments: 5
					});
					
					const textMaterial = new THREE.MeshBasicMaterial({ 
						color: '#00ff00',
            wireframe: true
					});
					
					const textMesh = new THREE.Mesh(textGeometry, textMaterial);
					
					// Center the text
					textGeometry.computeBoundingBox();
					const centerOffset = - 0.5 * (textGeometry.boundingBox.max.x - textGeometry.boundingBox.min.x);
					textMesh.position.x = centerOffset;
					textMesh.position.y = 12;
					textMesh.position.z = 0;
					
					scene.add(textMesh);
					
					render();
				});

				renderer = new THREE.WebGLRenderer( { antialias: true } );
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				document.getElementById('landing-hero').appendChild( renderer.domElement );

				const controls = new OrbitControls( camera, renderer.domElement );
				controls.addEventListener( 'change', render ); // use if there is no animation loop
				controls.minDistance = 10;
				controls.maxDistance = 100;

				window.addEventListener( 'resize', resize );

			}

			function resize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

				render();

			}

			function render() {

				renderer.render( scene, camera );

			}

		</script>